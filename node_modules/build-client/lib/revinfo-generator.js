/**
 * Plugin for generate front-end static resource url mappings.
 *
 * @author Allex Wang (allex.wxn@gmail.com)
 */

(function(require, exports, module) {
'use strict';

module.exports = buildRevinfo

var fs = require('fs-x')
  , path = require('path')
  , url = require('url')
  , revgen = require('revgen')

function frontSlash(path, cleanup) {
  path = path.replace(/\\/g, '/')
  return cleanup ? path.replace(/[/]+/g, '/') : path
}

function endsWithFrontSlash(s) {
    if (s && s.slice(-1) !== '/') s += '/'
    return s
}

/**
 * File model for buildRevinfo item constructs.
 * @internal
 * @constructor
 */
function File(file) {
  for (var k in file) {
    if (file.hasOwnProperty(k)) {
      this[k] = file[k]
    }
  }
  this.ext = path.extname(file.filename)
}

File.prototype = {
  constructor: File,
  getUrl: function(withHash) {

  }
}

function buildRevinfo (dir, options) {
  var list
    , map = {}
    , pid = options.name
    , out = options.output
    , reIgnore
    , prefix = options.prefix
    , prefixFn

  if (!prefix || !pid)
    throw 'Illegal options, both options [prefix] and [name] are required'

  prefixFn = prefix
  if (typeof prefixFn !== 'function') {
    prefix = endsWithFrontSlash(prefix)
    prefixFn = function(p, file) {
      return url.resolve(prefix, p) + '?v=' + file.hash.substring(4, 20)
    }
  }
  reIgnore = options.ignorePattern
  reIgnore = reIgnore ? (reIgnore instanceof RegExp ? reIgnore : RegExp(reIgnore)) : null

  list = revgen(dir, {
    filter: reIgnore ? function(p) { return !reIgnore.test(frontSlash(path.relative(dir, p))); } : null
  })
  .forEach(function(f) {
    var p = frontSlash(f.name)
    f.filename = path.join(dir, f.name)
    map[pid + '/' + p] = { url: prefixFn(p, new File(f)) || p }
  })

  if (out) {
    fs.writeJSONFileSync(out, map);
  }

  return map;
}

}(require, exports, module));
