#!/usr/bin/env node

/**
 * Publish project release info to deploy registry with cli.
 *
 * @author Allex Wang (allex.wxn@gmail.com)
 */

var path = require('path')
  , fs = require('fs')
  , lang = require('lang-ext')
  , BuildClient = require('../')
  , pkg = require('../package.json')

if (require.main === module) {
  run(process.argv.slice(2))
} else {
  exports.run = run
}

function run(args) {
  var options = {
        version: '0.0.1',
        env: 'test', // Defauts to test environment
        debug: false
      }
    , dir = null

  out: while (args.length > 0) {
    var v = args.shift();
    switch (v) {
      case '-p':
      case '--pid':
        options.name = args.shift();
        break;
      case '-r':
      case '--revision':
        options.version = args.shift();
        break;
      case '-i':
      case '--ignore':
        options.ignorePattern = args.shift();
        break;
      case '--debug':
        options.debug = true;
        break;
      case '-f':
      case '--tarball':
        options.tarball = args.shift();
        break;
      case '-d':
      case '--dir':
        dir = args.shift();
        break;
      case '-e':
      case '--env':
        options.env = args.shift();
        break;
      case '--registry':
        options.registry = args.shift();
        break;
      case '-h':
      case '--help':
        usage();
        return;
      case '-v':
      case '--version':
        console.log('v' + pkg.version);
        return;
      default:
        dir = v;
        break out;
    }
  }

  if (!dir) {
    return usage();
  }

  dir = path.resolve(dir);
  if (!fs.existsSync(dir)) {
    throw Error('fatal: The source directory not exist');
  }

  if (options.debug) {
    console.log('build-client cli options: ' + options);
  }

  publish(dir, options);
}

function usage() {
  var scriptName = path.basename(process.argv[1])
  var help = [
    scriptName + '@' + pkg.version,
    '',
    'Usage:',
    '  ' + scriptName + ' [options] <dir>',
    '',
    'Options:',
    '  --registry <url>             Set registry endpoint for publish to',
    '  --pid, -p <project_id>       (optional) Set project name, defaults to [pid] in `.dist.json\'',
    '  --tarball, -f <tarball_file> (optional) Upload a release package file',
    ''
  ].join('\n');
  console.log(help);
  process.exit();
}

function publish(dir, opts) {
  var client = new BuildClient({endpoint: opts.registry, env: opts.env});
  var releaseCfg = {
    name: opts.name,
    version: opts.version,
    prefix: opts.prefix,
    ignorePattern: opts.ignorePattern,
    tarball: opts.tarball,
    debug: opts.debug
  };
  client.release(dir, releaseCfg, function(err, res) {
    if (err) {
      console.error('Release Error: ' + (err.message || err));
    } else {
      console.log(res.message);
    }
  });
}

//  vim: set fdm=marker ts=2 sw=2 sts=2 tw=85 et :
