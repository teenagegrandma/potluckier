/**
 * Build client release implements.
 *
 * @author Allex Wang (allex.wxn@gmail.com)
 */

module.exports = release;

var fs = require('fs-x')
  , path = require('path')
  , lang = require('lang-ext')
  , sha1sum = lang.crypto.sha1
  , buildRevinfo = require('../lib/revinfo-generator')

function release(dir, options, cb) {
  options = options || {}

  if (!fs.existsSync(dir)) {
    return cb(new Error('fatal: The target directory "' + dir + '" not exists.'))
  }

  var cfgFile = path.join(dir, '.dist.json')
    , writeConfig = true

  // Mixin release customize settings.
  if (fs.existsSync(cfgFile)) {
    writeConfig = false
    try {
      lang.mix(options, require(cfgFile))
    } catch (e) {
      console.error('Parse dist config error, file: ' + cfgFile, e)
    }
  }

  if (!options.name) {
    return cb(new Error('fatal: The [pid] cannot nil, check your project `.dist.json\''))
  }

  if (!options.tarball) {
    console.warn('WARN: The release package unavailable, publish rev info only')
  }

  var revInfo = null
  try {
    revInfo = buildRevinfo(dir, options)
  } catch (e) {
    return cb(new Error(e && e.message || e))
  }

  if (!revInfo) {
    return cb(new Error('Build revision mapping failed, [options] => ' + JSON.stringify(options, null, ' ')))
  }

  var version = options.version
  if (!version) {
    version = sha1sum(JSON.stringify(revInfo)).substring(0, 7)
    console.warn('Release tag [version] not found, use sha1sum instead. (' + version + ')')
  }

  if (writeConfig) try {
    fs.writeJSONFileSync(cfgFile, options)
  } catch (e) { console.warn('Write dist config file failed, ' + e.message) }

  var uri = this.conf.get('endpoint')
    , params = {
      name: options.name,
      version: version
    }
    , data = {
      revInfo: revInfo,
      tarball: options.tarball
    }

  this.publish(uri, params, data, function() {
    cb && cb.apply(null, arguments)
  })
}

// vim: set fdm=marker ts=2 sw=2 sts=2 tw=0 et :
