/**
 * Build client publish implements.
 * @author Allex Wang (allex.wxn@gmail.com)
 */

module.exports = publish

var url = require('url')
  , crypto = require('crypto')
  , fs = require('fs')

function publish (uri, params, data, cb) {
  var self = this

  params = params || {}
  params.name = params.name || self.conf.get('name')

  var username = params.username
    , email = params.email
    , name = params.name

  if (!name) {
    return cb(new Error('invalid name: project name undefined'))
  }

  if (name !== encodeURIComponent(name))
    return cb(new Error('invalid name: must be url-safe'))

  var tarball = data.tarball
    , revInfo = data.revInfo

  if (!tarball && !revInfo)
    return cb(new Error('publish fatal, both tarball and revinfo not valid'))

  if (tarball) {
    fs.stat(tarball, function(er, s) {
      if (er) return cb(er)
      fs.readFile(tarball, function(er, tarbuffer) {
        if (er) return cb(er)
        putFirst.call(self, uri, params, revInfo, tarbuffer, s, username, email, cb)
      })
    })
  } else {
    putFirst.call(self, uri, params, revInfo, null, null, username, email, cb)
  }
}

function putFirst (uri, data, revInfo, tarbuffer, stat, username, email, cb) {
  var name = data.name
    , registry = this.registry || uri

  var root =
    { _id: name
    , name: name
    , 'dist-tags': {}
    , versions: {}
    }

  var version = data.version

  root.versions[ version ] = data
  data['rev-info'] = JSON.stringify(revInfo)
  var tag = data.tag || this.conf.get('tag') || 'latest'
  root['dist-tags'][tag] = version

  data._id = data.name+'@'+version

  if (tarbuffer) {
    data.dist = data.dist || {}

    var tbName = data.name + '-' + version + '.tgz'
      , tbURI = '-/' + tbName

    data.dist.shasum = crypto.createHash('sha1').update(tarbuffer).digest('hex')
    data.dist.tarball = url.resolve(registry, tbURI)

    var attachments = data._attachments || (data._attachments = {})
    attachments[ tbName ] = {
      content_type: 'application/octet-stream',
      data: tarbuffer.toString('base64'),
      length: stat.size
    }
  }

  this.request('POST', uri, { body: root }, function(err, parsed, data, response) {
    cb(err, parsed)
  })
}

// vim: set fdm=marker ts=2 sw=2 sts=2 tw=85 et :
