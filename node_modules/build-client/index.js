// utilities for working with the deploy site.

module.exports = BuildClient;

var url = require('url')
  , fs = require('fs')
  , package = require('./package.json')
  ;

function BuildClient (conf) {
  // accept either a plain-jane object, or a npmconf object
  // with a "get" method.
  if (typeof conf.get !== 'function') {
    var data = conf
    conf = { get: function (k) { return data[k] }
           , set: function (k, v) { data[k] = v }
           , remove: function (k) { delete data[k] } }
  }

  var version = package.version;

  this.conf = conf;
  this.version = version;

  var endpoint = conf.get('endpoint'), env = conf.get('env');
  if (endpoint) {
    endpoint = url.parse(endpoint);
    if (!endpoint.protocol) throw new Error('Invalid endpoint: ' + endpoint.url);
    endpoint = endpoint.href;
    if (/\/[^.]+$/.test(endpoint) && endpoint.slice(-1) !== '/') {
      endpoint += '/';
    }
    endpoint += (!~endpoint.indexOf('?') ? '?' : '&') + 'v=' + version;
    if (env) {
      endpoint += ('&dist=' + env);
    }
    conf.set('endpoint', endpoint);
  } else {
    throw Error('Init builder client failed, endpoint url not valid.');
  }

  this.endpoint = endpoint;

  var registry = conf.get('registry')
  if (registry) {
    if (/\/[^.]+$/.test(registry) && registry.slice(-1) !== '/') {
      registry += '/';
    }
    conf.set('registry', registry);
  } else {
    registry = endpoint;
  }

  this.registry = registry;
}

fs.readdirSync(__dirname + "/src").forEach(function (f) {
  if (!f.match(/\.js$/)) return
  BuildClient.prototype[f.replace(/\.js$/, '')] = require('./src/' + f);
});

// vim: set fdm=marker ts=2 sw=2 sts=2 tw=85 et :
