'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _warning = require('warning');

var _warning2 = _interopRequireDefault(_warning);

var _shortid = require('shortid');

var _shallowEqual = require('./shallow-equal');

var _shallowEqual2 = _interopRequireDefault(_shallowEqual);

var _getFillsize = require('./get-fillsize');

var _getFillsize2 = _interopRequireDefault(_getFillsize);

var _domUtils = require('./dom-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ScaleText = function (_Component) {
  _inherits(ScaleText, _Component);

  function ScaleText(props) {
    _classCallCheck(this, ScaleText);

    var _this = _possibleConstructorReturn(this, (ScaleText.__proto__ || Object.getPrototypeOf(ScaleText)).call(this, props));

    _this.state = {
      size: null
    };

    _this._resizing = false;
    _this._invalidChild = false;
    _this._mounted = false;

    _this._handleResize = function () {
      if (!_this._resizing) {
        requestAnimationFrame(_this.handleResize.bind(_this));
      }
      _this._resizing = true;
    };
    return _this;
  }

  _createClass(ScaleText, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var children = this.props.children;

      this._mounted = true;
      this._invalidChild = _react2.default.Children.count(children) > 1;

      (0, _warning2.default)(!this._invalidChild, '\'ScaleText\' expects a single node as a child, but we found\n      ' + _react2.default.Children.count(children) + ' children instead.\n      No scaling will be done on this subtree');

      if (this.shouldResize()) {
        this.resize();
        window.addEventListener('resize', this._handleResize);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      // compare children's props for change
      if (!(0, _shallowEqual2.default)(prevProps.children.props, this.props.children.props) || prevProps.children !== this.props.children || prevProps !== this.props) {
        this.resize();
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (!this.shouldResize()) {
        window.removeEventListener('resize', this._handleResize);
      }
    }
  }, {
    key: 'shouldResize',
    value: function shouldResize() {
      return !this._invalidChild;
    }
  }, {
    key: 'handleResize',
    value: function handleResize() {
      this._resizing = false;
      this.resize();
    }
  }, {
    key: 'resize',
    value: function resize() {
      var _this2 = this;

      var _props = this.props,
          minFontSize = _props.minFontSize,
          maxFontSize = _props.maxFontSize;

      if (!this._mounted || !this._wrapper) return;
      if (this.ruler) {
        this.clearRuler();
      }
      this.createRuler();

      var fontSize = (0, _getFillsize2.default)(this.ruler, minFontSize || Number.NEGATIVE_INFINITY, maxFontSize || Number.POSITIVE_INFINITY);

      this.setState({
        size: parseFloat(fontSize, 10),
        complete: true
      }, function () {
        _this2.clearRuler();
      });
    }
  }, {
    key: 'createRuler',
    value: function createRuler() {
      // Create copy of wrapper for sizing
      this.ruler = this._wrapper.cloneNode(true);
      this.ruler.id = (0, _shortid.generate)();
      (0, _domUtils.css)(this.ruler, {
        position: 'absolute',
        top: '0px',
        left: 'calc(100vw * 2)',
        width: (0, _domUtils.getStyle)(this._wrapper, 'width'),
        height: (0, _domUtils.getStyle)(this._wrapper, 'height')
      });
      document.body.appendChild(this.ruler);
    }
  }, {
    key: 'clearRuler',
    value: function clearRuler() {
      if (this.ruler) {
        document.body.removeChild(this.ruler);
      }
      this.ruler = null;
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var fontSize = this.state.size;
      var children = this.props.children;


      var child = _react2.default.isValidElement(children) ? _react2.default.Children.only(children) : _react2.default.createElement(
        'span',
        null,
        children
      );

      var style = {
        fontSize: fontSize ? fontSize.toFixed(2) + 'px' : 'inherit',
        width: '100%',
        height: '100%',
        overflow: 'hidden'
      };

      var childProps = {
        fontSize: fontSize ? parseFloat(fontSize.toFixed(2)) : 'inherit'
      };

      return _react2.default.createElement(
        'div',
        {
          className: 'scaletext-wrapper',
          ref: function ref(c) {
            _this3._wrapper = c;
          },
          style: style
        },
        _react2.default.cloneElement(child, childProps)
      );
    }
  }]);

  return ScaleText;
}(_react.Component);

ScaleText.propTypes = {
  children: _react.PropTypes.node.isRequired,
  minFontSize: _react.PropTypes.number.isRequired,
  maxFontSize: _react.PropTypes.number.isRequired
};

ScaleText.defaultProps = {
  minFontSize: Number.NEGATIVE_INFINITY,
  maxFontSize: Number.POSITIVE_INFINITY
};

// export default ScaleText;
module.exports = ScaleText;